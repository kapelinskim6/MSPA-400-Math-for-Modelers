Module 1

Exercise:Instead of using the trapazoidal rule for integration, substitute midpoint rule in the function integrate() 
and run the rest of the code without modification. Note the difference in how convergence occurs.

The modifications to the integrate function are shown below with the plot.

def integrate(a,b,n):
        sum = 0.0
        delta = (b-a)/n
        i = 0
        while i < n:
                  sum = sum + delta*(f(a+delta*(i+0.5)))
                  i = i+1
        return sum
        
Module 2

Exercise:Refer to Lial Section 15.4 Exercise 42. Modify the code to reproduce the plot shown in the exercise. 

def f(x):
        f = x*x-2.0*x 
        return f

def integrate(a,b,n):
        sum = 0.0
        delta = (b-a)/n
        i = 0
        while i < n:
                sum = sum + delta*(f(a+delta*(i+1))+f(a+delta*i))/2
                i = i+1
                return sum

c = 2.0
b = 0.0
a = -1.0
n=100

area1 = integrate(a,b,n)
area2 = integrate(b,c,n)
area = np.abs(area1)+np.abs(area2)
print"Final Estimate of Area= %r" %area

figure()
x = arange(-1.0,2.1,0.1)
y = f(x)
plot(x,y,c='k')
ymin=min(y)-0.5
ymax=max(y)+0.5

fill_between(x,0.0,y,where= y < 0.0, facecolor = 'y',interpolate=True)
fill_between(x,0.0,y,where= y > 0.0, facecolor = 'g', in
terpolate=True)
xlim(-2.0,4.0)
ylim(ymin-0.5,ymax+2.5)
xlabel('x-axis')
ylabel('y-axis')
title('Plot Showing Color Coded Integration Areas')

x=arange(-1.5,3.6,.1)
y=f(x)
z=0.0*x

u=0.0*y
plot(x,y,c='k')
plot(x,z,u,y,c='b')
show()
